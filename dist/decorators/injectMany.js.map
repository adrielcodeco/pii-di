{"version":3,"sources":["../../src/decorators/injectMany.ts"],"names":[],"mappings":";;AAOA,4BAAyB;AACzB,4CAAoC;AAEpC,oBAA4B,MAAwB;IAClD,OAAO,UACL,MAAc,EACd,YAA6B,EAC7B,KAAc;QAOd,MAAM,OAAO,GAAG,MAAM,IAAI,YAAY,CAAA;QAEtC,IAAI,MAAM,GAAG;YACX,OAAO,mBAAS,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;QACvC,CAAC,CAAA;QACD,IAAI,MAAM,GAAG,UAAU,MAAW;YAChC,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAA;QACvE,CAAC,CAAA;QACD,OAAO,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;QAC5C,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,EAAE;YAC1C,GAAG,EAAE,MAAM;YACX,GAAG,EAAE,MAAM;YACX,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAA;IACJ,CAAC,CAAA;AACH,CAAC;AA3BD,gCA2BC","file":"injectMany.js","sourcesContent":["/**\n * Copyright 2018-present, CODECO. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport 'reflect-metadata'\nimport Container from '../container'\n\nexport function InjectMany (option?: string | symbol): Function {\n  return function (\n    target: Object,\n    propertyName: string | symbol,\n    index?: number\n  ) {\n    // const propertyType = Reflect.getMetadata(\n    //   'design:type',\n    //   target,\n    //   propertyName\n    // )\n    const service = option || propertyName\n    // let _val = target[propertyName]\n    let getter = function () {\n      return Container.getServices(service)\n    }\n    let setter = function (newVal: any) {\n      throw new Error('This property has been injected, can not be setted')\n    }\n    Reflect.deleteProperty(target, propertyName)\n    Object.defineProperty(target, propertyName, {\n      get: getter,\n      set: setter,\n      enumerable: true,\n      configurable: true\n    })\n  }\n}\n"]}