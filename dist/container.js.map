{"version":3,"sources":["../src/container.ts"],"names":[],"mappings":";;AAOA,uCAA8C;AAC9C,mCAA2B;AAC3B,yCAAiC;AACjC,iCAAkE;AAIlE,MAAM,kBAAkB,GAAW,kBAAkB,CAAA;AACrD,MAAM,gBAAgB,GAAG,CAAC,OAAY,EAAE,EAAE;IACxC,OAAO,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAA;AAClC,CAAC,CAAA;AACD,gBAAgB,CAAC,MAAM,CAAC,CAAA;AACxB,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAA;AAC/D,MAAM,kBAAkB,GAAuB,EAAE,CAAA;AACjD,MAAM,kBAAkB,GAAuB,EAAE,CAAA;AAIjD,qBACE,SAA6B,EAC7B,OAAY;IAEZ,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAA;AAClE,CAAC;AAED,sBACE,OAAyB;IAEzB,OAAO,WAAW,CAAC,eAAe,EAAE,OAAO,CAAC,CAAA;AAC9C,CAAC;AAED,0BACE,OAAyB;IAEzB,OAAO,WAAW,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAA;AACjD,CAAC;AAED,0BACE,OAAyB;IAEzB,OAAO,WAAW,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAA;AACjD,CAAC;AAED,sBACE,SAA6B,EAC7B,OAAY,EACZ,KAAU;IAEV,MAAM,QAAQ,GAAG,WAAW,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;IAChD,IAAI,QAAQ,EAAE;QACZ,IAAI,QAAQ,CAAC,KAAK,YAAY,KAAK,EAAE;YACnC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;SAC3B;aAAM;YACL,SAAS,CAAC,MAAM,CACd,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAC3B,CAAC,EACD,IAAI,kBAAQ,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAC/C,CAAA;SACF;KACF;SAAM;QACL,SAAS,CAAC,IAAI,CAAC,IAAI,kBAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAA;KAC7C;AACH,CAAC;AAED,uBAAwB,SAA6B,EAAE,OAAY;IACjE,MAAM,QAAQ,GAAG,WAAW,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;IAChD,IAAI,QAAQ,EAAE;QACZ,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAA;QAChD,OAAO,IAAI,CAAA;KACZ;SAAM;QACL,OAAO,KAAK,CAAA;KACb;AACH,CAAC;AAED,4BACE,SAA6B,EAC7B,OAAY;IAEZ,MAAM,QAAQ,GAAG,WAAW,CAC1B,SAAS,EACT,OAAO,CACiC,CAAA;IAC1C,IAAI,MAAM,GACR,QAAQ,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;IACrE,MAAM,SAAS,GAAG,CAAC,KAA0C,EAAE,EAAE;QAC/D,IAAI,KAAK,YAAY,iBAAsB,EAAE;YAC3C,OAAO,WAAI,CAA4B,KAAK,CAAC,CAAC,WAAW,EAAE,CAAA;SAC5D;aAAM,IACL,OAAO,KAAK,KAAK,UAAU;YAC3B,KAAK,CAAC,SAAS;YACf,KAAK,CAAC,SAAS,CAAC,WAAW,EAC3B;YACA,OAAO,IAAK,KAAkB,EAAE,CAAA;SACjC;aAAM;YACL,OAAO,WAAI,CAAI,KAAK,CAAC,CAAA;SACtB;IACH,CAAC,CAAA;IACD,OAAO,MAAM,CAAC,GAAG,CAAI,SAAS,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;AAC1D,CAAC;AAED,sBAA0B,OAAyB;IACjD,MAAM,UAAU,GAAG,EAAE,CAAA;IACrB,IAAI,YAAY,CAAC,OAAO,CAAC,EAAE;QACzB,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;KACjC;IACD,IAAI,gBAAgB,CAAC,OAAO,CAAC,EAAE;QAC7B,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;KACpC;IACD,IAAI,gBAAgB,CAAC,OAAO,CAAC,EAAE;QAC7B,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;KACpC;IACD,OAAO,UAAU,CAAA;AACnB,CAAC;AAED;IACS,MAAM,CAAC,GAAG,CACf,UAAiD;QAEjD,MAAM,OAAO,GACX,eAAQ,CAAC,UAAU,CAAC,IAAI,eAAQ,CAAC,UAAU,CAAC;YAC1C,CAAC,CAAC,WAAI,CAAkB,UAAU,CAAC;YACnC,CAAC,CAAC,eAAK,CAAC,WAAI,CAAsB,UAAU,CAAC,CAAC,CAAA;QAClD,OAAO,CACL,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC;YACvB,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC;YAC3B,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAC5B,CAAA;IACH,CAAC;IAEM,MAAM,CAAC,GAAG,CACf,UAAiD;QAEjD,MAAM,OAAO,GACX,eAAQ,CAAC,UAAU,CAAC,IAAI,eAAQ,CAAC,UAAU,CAAC;YAC1C,CAAC,CAAC,WAAI,CAAkB,UAAU,CAAC;YACnC,CAAC,CAAC,eAAK,CAAC,WAAI,CAAsB,UAAU,CAAC,CAAC,CAAA;QAClD,MAAM,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAA;QACxD,IAAI,CAAC,SAAS;YAAE,OAAO,SAAS,CAAA;QAChC,OAAO,kBAAkB,CAAI,SAAS,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAA;IACnE,CAAC;IAEM,MAAM,CAAC,WAAW,CACvB,UAAiD;QAEjD,MAAM,OAAO,GACX,eAAQ,CAAC,UAAU,CAAC,IAAI,eAAQ,CAAC,UAAU,CAAC;YAC1C,CAAC,CAAC,WAAI,CAAkB,UAAU,CAAC;YACnC,CAAC,CAAC,eAAK,CAAC,WAAI,CAAsB,UAAU,CAAC,CAAC,CAAA;QAClD,MAAM,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,CAAA;QACvC,MAAM,OAAO,GAAQ,EAAE,CAAA;QACvB,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACpB,kBAAkB,CAAI,CAAC,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;QACjE,CAAC,CAAC,CAAA;QACF,OAAO,OAAO,CAAA;IAChB,CAAC;IAEM,MAAM,CAAC,GAAG,CACf,OAAmC,EACnC,KAAc;QAEd,YAAY,CAAC,kBAAkB,EAAE,OAAO,EAAE,KAAK,CAAC,CAAA;IAClD,CAAC;IAEM,MAAM,CAAC,SAAS,CACrB,OAAmC,EACnC,KAAc;QAEd,YAAY,CAAC,eAAe,EAAE,OAAO,EAAE,KAAK,CAAC,CAAA;IAC/C,CAAC;IAEM,MAAM,CAAC,YAAY,CACxB,OAAmC,EACnC,KAAc;QAEd,YAAY,CAAC,kBAAkB,EAAE,OAAO,EAAE,KAAK,CAAC,CAAA;IAClD,CAAC;IAEM,MAAM,CAAC,YAAY,CACxB,OAAmC,EACnC,KAAc,EACd,UAAmB,IAAI;QAEvB,IAAI,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YAC1B,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAA;aAC1D;YACD,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAA;SACnC;QACD,YAAY,CAAC,kBAAkB,EAAE,OAAO,EAAE,KAAK,CAAC,CAAA;IAClD,CAAC;IAMM,MAAM,CAAC,YAAY,CAAK,OAAmC;QAChE,OAAO,aAAa,CAAC,eAAe,EAAE,OAAO,CAAC,CAAA;IAChD,CAAC;IAMM,MAAM,CAAC,eAAe,CAC3B,OAAmC;QAEnC,OAAO,aAAa,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAA;IACnD,CAAC;IAMM,MAAM,CAAC,eAAe,CAC3B,OAAmC;QAEnC,OAAO,aAAa,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAA;IACnD,CAAC;CACF;AAxGD,4BAwGC","file":"container.js","sourcesContent":["/**\n * Copyright 2018-present, CODECO. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport ServiceInstanceFactory from './factory'\nimport Token from './token'\nimport KeyValue from './keyValue'\nimport { isString, isSymbol, Nullable, Class, cast } from './util'\n\ntype ContainerType < T > = KeyValue<any, T>[]\n\nconst globalContainerKey: string = 'pii_di_container'\nconst initializeGLobal = (_global: any) => {\n  _global[globalContainerKey] = []\n}\ninitializeGLobal(global)\nconst globalContainer = Reflect.get(global, globalContainerKey)\nconst singletonContainer: ContainerType<any> = []\nconst transientContainer: ContainerType<any> = []\n\ntype ContainerFieldTypes < T > = T | T[] | undefined | Function | Class<T>\n\nfunction findService<T> (\n  container: ContainerType<any>,\n  service: any\n): Nullable<KeyValue<any, T>> {\n  return container.filter(s => s.key === service).find(() => true)\n}\n\nfunction scopeService<T> (\n  service?: string | Symbol\n): Nullable<KeyValue<any, T>> {\n  return findService(globalContainer, service)\n}\n\nfunction singletonService<T> (\n  service?: string | Symbol\n): Nullable<KeyValue<any, T>> {\n  return findService(singletonContainer, service)\n}\n\nfunction transientService<T> (\n  service?: string | Symbol\n): Nullable<KeyValue<any, T>> {\n  return findService(transientContainer, service)\n}\n\nfunction addOneOrMany (\n  container: ContainerType<any>,\n  service: any,\n  value: any\n): void {\n  const keyValue = findService(container, service)\n  if (keyValue) {\n    if (keyValue.value instanceof Array) {\n      keyValue.value.push(value)\n    } else {\n      container.splice(\n        container.indexOf(keyValue),\n        1,\n        new KeyValue(service, [keyValue.value, value])\n      )\n    }\n  } else {\n    container.push(new KeyValue(service, value))\n  }\n}\n\nfunction removeService (container: ContainerType<any>, service: any): boolean {\n  const keyValue = findService(container, service)\n  if (keyValue) {\n    container.splice(container.indexOf(keyValue), 1)\n    return true\n  } else {\n    return false\n  }\n}\n\nfunction getInstanceOrValue<T> (\n  container: ContainerType<any>,\n  service: any\n): T[] {\n  const keyValue = findService<ContainerFieldTypes<T>>(\n    container,\n    service\n  ) as KeyValue<any, ContainerFieldTypes<T>>\n  let values =\n    keyValue.value instanceof Array ? keyValue.value : [keyValue.value]\n  const mapValues = (Value: Function | T | Class<T> | undefined) => {\n    if (Value instanceof ServiceInstanceFactory) {\n      return cast<ServiceInstanceFactory<T>>(Value).newInstance()\n    } else if (\n      typeof Value === 'function' &&\n      Value.prototype &&\n      Value.prototype.constructor\n    ) {\n      return new (Value as Class<T>)()\n    } else {\n      return cast<T>(Value)\n    }\n  }\n  return values.map<T>(mapValues).filter(value => !!value)\n}\n\nfunction getContainer<T> (service?: string | Symbol): ContainerType<T>[] {\n  const containers = []\n  if (scopeService(service)) {\n    containers.push(globalContainer)\n  }\n  if (singletonService(service)) {\n    containers.push(singletonContainer)\n  }\n  if (transientService(service)) {\n    containers.push(transientContainer)\n  }\n  return containers\n}\n\nexport default class Container {\n  public static has<T> (\n    identifier: string | Symbol | Class<T> | Function\n  ): boolean {\n    const service: string | Symbol =\n      isString(identifier) || isSymbol(identifier)\n        ? cast<string | Symbol>(identifier)\n        : Token(cast<Class<T> | Function>(identifier))\n    return (\n      !!scopeService(service) ||\n      !!singletonService(service) ||\n      !!transientService(service)\n    )\n  }\n\n  public static get<T> (\n    identifier: string | Symbol | Class<T> | Function\n  ): Nullable<T> {\n    const service =\n      isString(identifier) || isSymbol(identifier)\n        ? cast<string | Symbol>(identifier)\n        : Token(cast<Class<T> | Function>(identifier))\n    const container = getContainer(service).find(() => true)\n    if (!container) return undefined\n    return getInstanceOrValue<T>(container, service).find(() => true)\n  }\n\n  public static getServices<T> (\n    identifier: string | Symbol | Class<T> | Function\n  ): T[] {\n    const service =\n      isString(identifier) || isSymbol(identifier)\n        ? cast<string | Symbol>(identifier)\n        : Token(cast<Class<T> | Function>(identifier))\n    const container = getContainer(service)\n    const results: T[] = []\n    container.forEach(c => {\n      getInstanceOrValue<T>(c, service).forEach(r => results.push(r))\n    })\n    return results\n  }\n\n  public static add<T> (\n    service: string | Symbol | Class<T>,\n    value: T | any\n  ): void {\n    addOneOrMany(singletonContainer, service, value)\n  }\n\n  public static addScoped<T> (\n    service: string | Symbol | Class<T>,\n    value: T | any\n  ): void {\n    addOneOrMany(globalContainer, service, value)\n  }\n\n  public static addTransient<T> (\n    service: string | Symbol | Class<T>,\n    value: T | any\n  ): void {\n    addOneOrMany(transientContainer, service, value)\n  }\n\n  public static addSingleton<T> (\n    service: string | Symbol | Class<T>,\n    value: T | any,\n    replace: boolean = true\n  ): void {\n    if (Container.has(service)) {\n      if (!replace) {\n        throw new Error('the container already has this service')\n      }\n      Container.removeSingleton(service)\n    }\n    addOneOrMany(singletonContainer, service, value)\n  }\n\n  /**\n   * Remove service from Scoped container\n   * @param {string | Symbol | { new (...args: any[]): T}} service service identifier\n   */\n  public static removeScoped<T> (service: string | Symbol | Class<T>): boolean {\n    return removeService(globalContainer, service)\n  }\n\n  /**\n   * Remove service from Transient container\n   * @param {string | Symbol | { new (...args: any[]): T}} service service identifier\n   */\n  public static removeTransient<T> (\n    service: string | Symbol | Class<T>\n  ): boolean {\n    return removeService(transientContainer, service)\n  }\n\n  /**\n   * Remove service from Singleton container\n   * @param {string | Symbol | { new (...args: any[]): T}} service service identifier\n   */\n  public static removeSingleton<T> (\n    service: string | Symbol | Class<T>\n  ): boolean {\n    return removeService(singletonContainer, service)\n  }\n}\n"]}